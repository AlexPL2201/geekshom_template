mkdir <Name of project1>
cd <Name of project1>
python -m django startproject <Name of project2>
---------------------------------------------------------------
Name of project1 - корень
	manage.py — утилита командной строки, которая позволяет взаимодействовать с проектом
	различными методами
	
	Name of project2 содержит такие файлы как:
		__init__.py — файл необходим для того, чтобы Python рассматривал данный каталог как
		пакет, то есть как группу модулей. Это пустой файл, и обычно не требуется добавлять
		что-либо в него.
		
		settings.py — настройки проекта Django.
		url.py — диспетчер url-адресов проекта.
		wsgi.py — файл, который потребуется для развертывания на боевом сервере.

Главный критерий при разделении проекта на приложения — это их автономность, возможность в
перспективе применять их в других проектах независимо друг от друга. Например, в любом проекте
должна быть админка (adminapp) и система авторизации пользователей (authapp). В проектах
интернет-магазинов должна быть корзина (basketapp). Создадим пока одно «главное» приложение
mainapp:
---------------------------------------------------------------
cd Name of project2
python3 -m django startapp <(Name of app) + app>
---------------------------------------------------------------
Name of project1
	manage.py
	Name of project2
	(Name of app) + app содержит такие файлы как:
		migration/ — папка, где будут создаваться миграции при работе с БД (будем разбирать на следующих уроках).
		admin.py — файл для работы встроенной в Django админки.
		apps.py — вспомогательный файл Django, никогда не будем менять его содержимое.
		
		models.py — файл, где описываются модели django-приложения (будем создавать на
		следующих уроках).
		
		tests.py — файл с тестами приложения (тесты будут рассматриваться на следующем курсе).
		
		views.py — файл с контроллерами приложения, выполняющими его основную логику (сегодня
		создадим три контроллера для основных страниц — index, products и contacts).

Далее создадим папку со статистическими файлами (statics), а так же в (Name of app) + app папку с шаблонами (templates) и в ней создадим 
папку (Name of app) + app:
---------------------------------------------------------------
mkdir <(Name of app) + app>\templates\<(Name of app) + app>
mkdir statics\css
mkdir statics\fonts
mkdir statics\img
mkdir statics\js
---------------------------------------------------------------
Откроем файл settings.py и допишем в параметр INSTALLED_APPS название нового приложения.
Также добавим параметр STATICFILES_DIRS, где BASE_DIR - корень — это позволит организовать раздачу статических
файлов (папки CSS, JS, IMG, FONTS) силами сервера Django:
---------------------------------------------------------------
INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'<(Name of app) + app>',
]
...
STATIC_URL = '/static/'
STATICFILES_DIRS = (BASE_DIR/ 'static',)
---------------------------------------------------------------
Создадим контроллеры для переключения между страницами, для этого откроем файл views.py и добавим функцию:
---------------------------------------------------------------
def index(request):
	return render(request, '<(Name of app) + app>/index.html')
---------------------------------------------------------------
Импортируем файл (views.py) в (urls.py), как mainapp и добавим в переменную urlpatterns записи соответствия шаблонов url-адресов 
и функций-обработчиков из файла mainapp.views при помощи функции path()
---------------------------------------------------------------
import <(Name of app) + app>.views as mainapp

urlpatterns = [
	path('', mainapp.main),
	path('admin/', admin.site.urls),
]
---------------------------------------------------------------
Откроем файл index.html, в путях к статическим файлам дописываем /static/:
●	стили и шрифты
●	изображения (в том числе и в файле стилей css!):
